{"version":3,"file":"inflate.min.js","sources":["../src/Inflate/util.js","../src/Inflate/adler32.js","../src/Inflate/hybrid.js","../src/Inflate/huffman.js","../src/Inflate/rawinflate.js","../src/Inflate/zlib.js","../src/Inflate/inflate.js","../src/index.js"],"sourcesContent":["function stringToByteArray (str){\r\n    /** @type {!Array.<(string|number)>} */\r\n    var tmp = str.split('');\r\n    /** @type {number} */\r\n    var i;\r\n    /** @type {number} */\r\n    var il;\r\n\r\n    for (i = 0, il = tmp.length; i < il; i++) {\r\n        tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;\r\n    }\r\n\r\n    return tmp;\r\n}\r\nexport default stringToByteArray;\r\n","import stringToByteArray from \"./util\"\r\n/**\r\n * Adler32 ハッシュ値の作成\r\n * @param {!(Array|Uint8Array|string)} array 算出に使用する byte array.\r\n * @return {number} Adler32 ハッシュ値.\r\n */\r\nconst Adler32 = function(array) {\r\n    if (typeof(array) === 'string') {\r\n        array = stringToByteArray(array);\r\n    }\r\n    return Adler32.update(1, array);\r\n};\r\n\r\n/**\r\n * Adler32 ハッシュ値の更新\r\n * @param {number} adler 現在のハッシュ値.\r\n * @param {!(Array|Uint8Array)} array 更新に使用する byte array.\r\n * @return {number} Adler32 ハッシュ値.\r\n */\r\nAdler32.update = function(adler, array) {\r\n    /** @type {number} */\r\n    var s1 = adler & 0xffff;\r\n    /** @type {number} */\r\n    var s2 = (adler >>> 16) & 0xffff;\r\n    /** @type {number} array length */\r\n    var len = array.length;\r\n    /** @type {number} loop length (don't overflow) */\r\n    var tlen;\r\n    /** @type {number} array index */\r\n    var i = 0;\r\n\r\n    while (len > 0) {\r\n        tlen = len > Adler32.OptimizationParameter ?\r\n            Adler32.OptimizationParameter : len;\r\n        len -= tlen;\r\n        do {\r\n            s1 += array[i++];\r\n            s2 += s1;\r\n        } while (--tlen);\r\n\r\n        s1 %= 65521;\r\n        s2 %= 65521;\r\n    }\r\n\r\n    return ((s2 << 16) | s1) >>> 0;\r\n};\r\n\r\n/**\r\n * Adler32 最適化パラメータ\r\n * 現状では 1024 程度が最適.\r\n * @see http://jsperf.com/adler-32-simple-vs-optimized/3\r\n * @define {number}\r\n */\r\nAdler32.OptimizationParameter = 1024;\r\n\r\nexport default Adler32\r\n","const USE_TYPEDARRAY =\r\n    (typeof Uint8Array !== 'undefined') &&\r\n    (typeof Uint16Array !== 'undefined') &&\r\n    (typeof Uint32Array !== 'undefined') &&\r\n    (typeof DataView !== 'undefined');\r\n\r\nexport default USE_TYPEDARRAY;\r\n","import USE_TYPEDARRAY from \"./hybrid\"\r\n\r\nlet buildHuffmanTable = function(lengths) {\r\n    /** @type {number} length list size. */\r\n    var listSize = lengths.length;\r\n    /** @type {number} max code length for table size. */\r\n    var maxCodeLength = 0;\r\n    /** @type {number} min code length for table size. */\r\n    var minCodeLength = Number.POSITIVE_INFINITY;\r\n    /** @type {number} table size. */\r\n    var size;\r\n    /** @type {!(Array|Uint8Array)} huffman code table. */\r\n    var table;\r\n    /** @type {number} bit length. */\r\n    var bitLength;\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /**\r\n     * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.\r\n     * @type {number} skip length for table filling.\r\n     */\r\n    var skip;\r\n    /** @type {number} reversed code. */\r\n    var reversed;\r\n    /** @type {number} reverse temp. */\r\n    var rtemp;\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limit. */\r\n    var il;\r\n    /** @type {number} loop counter. */\r\n    var j;\r\n    /** @type {number} table value. */\r\n    var value;\r\n\r\n    // Math.max は遅いので最長の値は for-loop で取得する\r\n    for (i = 0, il = listSize; i < il; ++i) {\r\n        if (lengths[i] > maxCodeLength) {\r\n            maxCodeLength = lengths[i];\r\n        }\r\n        if (lengths[i] < minCodeLength) {\r\n            minCodeLength = lengths[i];\r\n        }\r\n    }\r\n\r\n    size = 1 << maxCodeLength;\r\n    table = new (USE_TYPEDARRAY ? Uint32Array : Array)(size);\r\n\r\n    // ビット長の短い順からハフマン符号を割り当てる\r\n    for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {\r\n        for (i = 0; i < listSize; ++i) {\r\n            if (lengths[i] === bitLength) {\r\n                // ビットオーダーが逆になるためビット長分並びを反転する\r\n                for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {\r\n                    reversed = (reversed << 1) | (rtemp & 1);\r\n                    rtemp >>= 1;\r\n                }\r\n\r\n                // 最大ビット長をもとにテーブルを作るため、\r\n                // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる\r\n                // そのどちらでも良い場所は同じ値で埋めることで\r\n                // 本来のビット長以上のビット数取得しても問題が起こらないようにする\r\n                value = (bitLength << 16) | i;\r\n                for (j = reversed; j < size; j += skip) {\r\n                    table[j] = value;\r\n                }\r\n\r\n                ++code;\r\n            }\r\n        }\r\n\r\n        // 次のビット長へ\r\n        ++bitLength;\r\n        code <<= 1;\r\n        skip <<= 1;\r\n    }\r\n\r\n    return [table, maxCodeLength, minCodeLength];\r\n};\r\nexport default buildHuffmanTable;\r\n","import USE_TYPEDARRAY from \"./hybrid\"\r\nimport buildHuffmanTable from \"./huffman\"\r\n\r\n/**\r\n * @constructor\r\n * @param {!(Uint8Array|Array.<number>)} input input buffer.\r\n * @param {Object} opt_params option parameter.\r\n *\r\n * opt_params は以下のプロパティを指定する事ができます。\r\n *   - index: input buffer の deflate コンテナの開始位置.\r\n *   - blockSize: バッファのブロックサイズ.\r\n *   - bufferType: RawInflate.BufferType の値によってバッファの管理方法を指定する.\r\n *   - resize: 確保したバッファが実際の大きさより大きかった場合に切り詰める.\r\n */\r\nconst RawInflate = function(input, opt_params) {\r\n    /** @type {!(Array.<number>|Uint8Array)} inflated buffer */\r\n    this.buffer;\r\n    /** @type {!Array.<(Array.<number>|Uint8Array)>} */\r\n    this.blocks = [];\r\n    /** @type {number} block size. */\r\n    this.bufferSize = 0x8000;\r\n    /** @type {!number} total output buffer pointer. */\r\n    this.totalpos = 0;\r\n    /** @type {!number} input buffer pointer. */\r\n    this.ip = 0;\r\n    /** @type {!number} bit stream reader buffer. */\r\n    this.bitsbuf = 0;\r\n    /** @type {!number} bit stream reader buffer size. */\r\n    this.bitsbuflen = 0;\r\n    /** @type {!(Array.<number>|Uint8Array)} input buffer. */\r\n    this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;\r\n    /** @type {!(Uint8Array|Array.<number>)} output buffer. */\r\n    this.output;\r\n    /** @type {!number} output buffer pointer. */\r\n    this.op;\r\n    /** @type {boolean} is final block flag. */\r\n    this.bfinal = false;\r\n    /** @type {RawInflate.BufferType} buffer management. */\r\n    this.bufferType = RawInflate.BufferType.ADAPTIVE;\r\n    /** @type {boolean} resize flag for memory size optimization. */\r\n    this.resize = false;\r\n\r\n    // option parameters\r\n    if (opt_params || !(opt_params = {})) {\r\n        if (opt_params['index']) {\r\n            this.ip = opt_params['index'];\r\n        }\r\n        if (opt_params['bufferSize']) {\r\n            this.bufferSize = opt_params['bufferSize'];\r\n        }\r\n        if (opt_params['bufferType']) {\r\n            this.bufferType = opt_params['bufferType'];\r\n        }\r\n        if (opt_params['resize']) {\r\n            this.resize = opt_params['resize'];\r\n        }\r\n    }\r\n\r\n    // initialize\r\n    switch (this.bufferType) {\r\n        case RawInflate.BufferType.BLOCK:\r\n            this.op = RawInflate.MaxBackwardLength;\r\n            this.output =\r\n                new (USE_TYPEDARRAY ? Uint8Array : Array)(\r\n                    RawInflate.MaxBackwardLength +\r\n                    this.bufferSize +\r\n                    RawInflate.MaxCopyLength\r\n                );\r\n            break;\r\n        case RawInflate.BufferType.ADAPTIVE:\r\n            this.op = 0;\r\n            this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n            this.expandBuffer = this.expandBufferAdaptive;\r\n            this.concatBuffer = this.concatBufferDynamic;\r\n            this.decodeHuffman = this.decodeHuffmanAdaptive;\r\n            break;\r\n        default:\r\n            throw new Error('invalid inflate mode');\r\n    }\r\n};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nRawInflate.BufferType = {\r\n    BLOCK: 0,\r\n    ADAPTIVE: 1\r\n};\r\n\r\n/**\r\n * decompress.\r\n * @return {!(Uint8Array|Array.<number>)} inflated buffer.\r\n */\r\nRawInflate.prototype.decompress = function() {\r\n    while (!this.bfinal) {\r\n        this.parseBlock();\r\n    }\r\n\r\n    return this.concatBuffer();\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {number} max backward length for LZ77.\r\n */\r\nRawInflate.MaxBackwardLength = 32768;\r\n\r\n/**\r\n * @const\r\n * @type {number} max copy length for LZ77.\r\n */\r\nRawInflate.MaxCopyLength = 258;\r\n\r\n/**\r\n * huffman order\r\n * @const\r\n * @type {!(Array.<number>|Uint8Array)}\r\n */\r\nRawInflate.Order = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n})([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\n\r\n/**\r\n * huffman length code table.\r\n * @const\r\n * @type {!(Array.<number>|Uint16Array)}\r\n */\r\nRawInflate.LengthCodeTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n})([\r\n    0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,\r\n    0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b,\r\n    0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3,\r\n    0x00e3, 0x0102, 0x0102, 0x0102\r\n]);\r\n\r\n/**\r\n * huffman length extra-bits table.\r\n * @const\r\n * @type {!(Array.<number>|Uint8Array)}\r\n */\r\nRawInflate.LengthExtraTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint8Array(table) : table;\r\n})([\r\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,\r\n    5, 5, 0, 0, 0\r\n]);\r\n\r\n/**\r\n * huffman dist code table.\r\n * @const\r\n * @type {!(Array.<number>|Uint16Array)}\r\n */\r\nRawInflate.DistCodeTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n})([\r\n    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011,\r\n    0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181,\r\n    0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001,\r\n    0x3001, 0x4001, 0x6001\r\n]);\r\n\r\n/**\r\n * huffman dist extra-bits table.\r\n * @const\r\n * @type {!(Array.<number>|Uint8Array)}\r\n */\r\nRawInflate.DistExtraTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint8Array(table) : table;\r\n})([\r\n    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,\r\n    11, 12, 12, 13, 13\r\n]);\r\n\r\n/**\r\n * fixed huffman length code table\r\n * @const\r\n * @type {!Array}\r\n */\r\nRawInflate.FixedLiteralLengthTable = (function(table) {\r\n    return table;\r\n})((function() {\r\n    var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);\r\n    var i, il;\r\n\r\n    for (i = 0, il = lengths.length; i < il; ++i) {\r\n        lengths[i] =\r\n            (i <= 143) ? 8 :\r\n                (i <= 255) ? 9 :\r\n                    (i <= 279) ? 7 :\r\n                        8;\r\n    }\r\n\r\n    return buildHuffmanTable(lengths);\r\n})());\r\n\r\n/**\r\n * fixed huffman distance code table\r\n * @const\r\n * @type {!Array}\r\n */\r\nRawInflate.FixedDistanceTable = (function(table) {\r\n    return table;\r\n})((function() {\r\n    var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);\r\n    var i, il;\r\n\r\n    for (i = 0, il = lengths.length; i < il; ++i) {\r\n        lengths[i] = 5;\r\n    }\r\n\r\n    return buildHuffmanTable(lengths);\r\n})());\r\n\r\n/**\r\n * parse deflated block.\r\n */\r\nRawInflate.prototype.parseBlock = function() {\r\n    /** @type {number} header */\r\n    var hdr = this.readBits(3);\r\n\r\n    // BFINAL\r\n    if (hdr & 0x1) {\r\n        this.bfinal = true;\r\n    }\r\n\r\n    // BTYPE\r\n    hdr >>>= 1;\r\n    switch (hdr) {\r\n        // uncompressed\r\n        case 0:\r\n            this.parseUncompressedBlock();\r\n            break;\r\n        // fixed huffman\r\n        case 1:\r\n            this.parseFixedHuffmanBlock();\r\n            break;\r\n        // dynamic huffman\r\n        case 2:\r\n            this.parseDynamicHuffmanBlock();\r\n            break;\r\n        // reserved or other\r\n        default:\r\n            throw new Error('unknown BTYPE: ' + hdr);\r\n    }\r\n};\r\n\r\n/**\r\n * read inflate bits\r\n * @param {number} length bits length.\r\n * @return {number} read bits.\r\n */\r\nRawInflate.prototype.readBits = function(length) {\r\n    var bitsbuf = this.bitsbuf;\r\n    var bitsbuflen = this.bitsbuflen;\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    /** @type {number} */\r\n    var inputLength = input.length;\r\n    /** @type {number} input and output byte. */\r\n    var octet;\r\n\r\n    // not enough buffer\r\n    while (bitsbuflen < length) {\r\n        // input byte\r\n        if (ip >= inputLength) {\r\n            throw new Error('input buffer is broken');\r\n        }\r\n\r\n        // concat octet\r\n        bitsbuf |= input[ip++] << bitsbuflen;\r\n        bitsbuflen += 8;\r\n    }\r\n\r\n    // output byte\r\n    octet = bitsbuf & /* MASK */ ((1 << length) - 1);\r\n    bitsbuf >>>= length;\r\n    bitsbuflen -= length;\r\n\r\n    this.bitsbuf = bitsbuf;\r\n    this.bitsbuflen = bitsbuflen;\r\n    this.ip = ip;\r\n\r\n    return octet;\r\n};\r\n\r\n/**\r\n * read huffman code using table\r\n * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.\r\n * @return {number} huffman code.\r\n */\r\nRawInflate.prototype.readCodeByTable = function(table) {\r\n    var bitsbuf = this.bitsbuf;\r\n    var bitsbuflen = this.bitsbuflen;\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    /** @type {number} */\r\n    var inputLength = input.length;\r\n    /** @type {!(Array.<number>|Uint8Array)} huffman code table */\r\n    var codeTable = table[0];\r\n    /** @type {number} */\r\n    var maxCodeLength = table[1];\r\n    /** @type {number} code length & code (16bit, 16bit) */\r\n    var codeWithLength;\r\n    /** @type {number} code bits length */\r\n    var codeLength;\r\n\r\n    // not enough buffer\r\n    while (bitsbuflen < maxCodeLength) {\r\n        if (ip >= inputLength) {\r\n            break;\r\n        }\r\n        bitsbuf |= input[ip++] << bitsbuflen;\r\n        bitsbuflen += 8;\r\n    }\r\n\r\n    // read max length\r\n    codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)];\r\n    codeLength = codeWithLength >>> 16;\r\n\r\n    if (codeLength > bitsbuflen) {\r\n        throw new Error('invalid code length: ' + codeLength);\r\n    }\r\n\r\n    this.bitsbuf = bitsbuf >> codeLength;\r\n    this.bitsbuflen = bitsbuflen - codeLength;\r\n    this.ip = ip;\r\n\r\n    return codeWithLength & 0xffff;\r\n};\r\n\r\n/**\r\n * parse uncompressed block.\r\n */\r\nRawInflate.prototype.parseUncompressedBlock = function() {\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    /** @type {number} */\r\n    var inputLength = input.length;\r\n    /** @type {number} block length */\r\n    var len;\r\n    /** @type {number} number for check block length */\r\n    var nlen;\r\n    /** @type {number} output buffer length */\r\n    var olength = output.length;\r\n    /** @type {number} copy counter */\r\n    var preCopy;\r\n\r\n    // skip buffered header bits\r\n    this.bitsbuf = 0;\r\n    this.bitsbuflen = 0;\r\n\r\n    // len\r\n    if (ip + 1 >= inputLength) {\r\n        throw new Error('invalid uncompressed block header: LEN');\r\n    }\r\n    len = input[ip++] | (input[ip++] << 8);\r\n\r\n    // nlen\r\n    if (ip + 1 >= inputLength) {\r\n        throw new Error('invalid uncompressed block header: NLEN');\r\n    }\r\n    nlen = input[ip++] | (input[ip++] << 8);\r\n\r\n    // check len & nlen\r\n    if (len === ~nlen) {\r\n        throw new Error('invalid uncompressed block header: length verify');\r\n    }\r\n\r\n    // check size\r\n    if (ip + len > input.length) { throw new Error('input buffer is broken'); }\r\n\r\n    // expand buffer\r\n    switch (this.bufferType) {\r\n        case RawInflate.BufferType.BLOCK:\r\n            // pre copy\r\n            while (op + len > output.length) {\r\n                preCopy = olength - op;\r\n                len -= preCopy;\r\n                if (USE_TYPEDARRAY) {\r\n                    output.set(input.subarray(ip, ip + preCopy), op);\r\n                    op += preCopy;\r\n                    ip += preCopy;\r\n                } else {\r\n                    while (preCopy--) {\r\n                        output[op++] = input[ip++];\r\n                    }\r\n                }\r\n                this.op = op;\r\n                output = this.expandBuffer();\r\n                op = this.op;\r\n            }\r\n            break;\r\n        case RawInflate.BufferType.ADAPTIVE:\r\n            while (op + len > output.length) {\r\n                output = this.expandBuffer({fixRatio: 2});\r\n            }\r\n            break;\r\n        default:\r\n            throw new Error('invalid inflate mode');\r\n    }\r\n\r\n    // copy\r\n    if (USE_TYPEDARRAY) {\r\n        output.set(input.subarray(ip, ip + len), op);\r\n        op += len;\r\n        ip += len;\r\n    } else {\r\n        while (len--) {\r\n            output[op++] = input[ip++];\r\n        }\r\n    }\r\n\r\n    this.ip = ip;\r\n    this.op = op;\r\n    this.output = output;\r\n};\r\n\r\n/**\r\n * parse fixed huffman block.\r\n */\r\nRawInflate.prototype.parseFixedHuffmanBlock = function() {\r\n    this.decodeHuffman(\r\n        RawInflate.FixedLiteralLengthTable,\r\n        RawInflate.FixedDistanceTable\r\n    );\r\n};\r\n\r\n/**\r\n * parse dynamic huffman block.\r\n */\r\nRawInflate.prototype.parseDynamicHuffmanBlock = function() {\r\n    /** @type {number} number of literal and length codes. */\r\n    var hlit = this.readBits(5) + 257;\r\n    /** @type {number} number of distance codes. */\r\n    var hdist = this.readBits(5) + 1;\r\n    /** @type {number} number of code lengths. */\r\n    var hclen = this.readBits(4) + 4;\r\n    /** @type {!(Uint8Array|Array.<number>)} code lengths. */\r\n    var codeLengths =\r\n        new (USE_TYPEDARRAY ? Uint8Array : Array)(RawInflate.Order.length);\r\n    /** @type {!Array} code lengths table. */\r\n    var codeLengthsTable;\r\n    /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */\r\n    var litlenTable;\r\n    /** @type {!(Uint8Array|Array.<number>)} distance code table. */\r\n    var distTable;\r\n    /** @type {!(Uint8Array|Array.<number>)} code length table. */\r\n    var lengthTable;\r\n    /** @type {number} */\r\n    var code;\r\n    /** @type {number} */\r\n    var prev;\r\n    /** @type {number} */\r\n    var repeat;\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limit. */\r\n    var il;\r\n\r\n    // decode code lengths\r\n    for (i = 0; i < hclen; ++i) {\r\n        codeLengths[RawInflate.Order[i]] = this.readBits(3);\r\n    }\r\n    if (!USE_TYPEDARRAY) {\r\n        for (i = hclen, hclen = codeLengths.length; i < hclen; ++i) {\r\n            codeLengths[RawInflate.Order[i]] = 0;\r\n        }\r\n    }\r\n\r\n    // decode length table\r\n    codeLengthsTable = buildHuffmanTable(codeLengths);\r\n    lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);\r\n    for (i = 0, il = hlit + hdist; i < il;) {\r\n        code = this.readCodeByTable(codeLengthsTable);\r\n        switch (code) {\r\n            case 16:\r\n                repeat = 3 + this.readBits(2);\r\n                while (repeat--) { lengthTable[i++] = prev; }\r\n                break;\r\n            case 17:\r\n                repeat = 3 + this.readBits(3);\r\n                while (repeat--) { lengthTable[i++] = 0; }\r\n                prev = 0;\r\n                break;\r\n            case 18:\r\n                repeat = 11 + this.readBits(7);\r\n                while (repeat--) { lengthTable[i++] = 0; }\r\n                prev = 0;\r\n                break;\r\n            default:\r\n                lengthTable[i++] = code;\r\n                prev = code;\r\n                break;\r\n        }\r\n    }\r\n\r\n    litlenTable = USE_TYPEDARRAY\r\n        ? buildHuffmanTable(lengthTable.subarray(0, hlit))\r\n        : buildHuffmanTable(lengthTable.slice(0, hlit));\r\n    distTable = USE_TYPEDARRAY\r\n        ? buildHuffmanTable(lengthTable.subarray(hlit))\r\n        : buildHuffmanTable(lengthTable.slice(hlit));\r\n\r\n    this.decodeHuffman(litlenTable, distTable);\r\n};\r\n\r\n/**\r\n * decode huffman code\r\n * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.\r\n * @param {!(Array.<number>|Uint8Array)} dist distination code table.\r\n */\r\nRawInflate.prototype.decodeHuffman = function(litlen, dist) {\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    this.currentLitlenTable = litlen;\r\n\r\n    /** @type {number} output position limit. */\r\n    var olength = output.length - RawInflate.MaxCopyLength;\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /** @type {number} table index. */\r\n    var ti;\r\n    /** @type {number} huffman code distination. */\r\n    var codeDist;\r\n    /** @type {number} huffman code length. */\r\n    var codeLength;\r\n\r\n    while ((code = this.readCodeByTable(litlen)) !== 256) {\r\n        // literal\r\n        if (code < 256) {\r\n            if (op >= olength) {\r\n                this.op = op;\r\n                output = this.expandBuffer();\r\n                op = this.op;\r\n            }\r\n            output[op++] = code;\r\n\r\n            continue;\r\n        }\r\n\r\n        // length code\r\n        ti = code - 257;\r\n        codeLength = RawInflate.LengthCodeTable[ti];\r\n        if (RawInflate.LengthExtraTable[ti] > 0) {\r\n            codeLength += this.readBits(RawInflate.LengthExtraTable[ti]);\r\n        }\r\n\r\n        // dist code\r\n        code = this.readCodeByTable(dist);\r\n        codeDist = RawInflate.DistCodeTable[code];\r\n        if (RawInflate.DistExtraTable[code] > 0) {\r\n            codeDist += this.readBits(RawInflate.DistExtraTable[code]);\r\n        }\r\n\r\n        // lz77 decode\r\n        if (op >= olength) {\r\n            this.op = op;\r\n            output = this.expandBuffer();\r\n            op = this.op;\r\n        }\r\n        while (codeLength--) {\r\n            output[op] = output[(op++) - codeDist];\r\n        }\r\n    }\r\n\r\n    while (this.bitsbuflen >= 8) {\r\n        this.bitsbuflen -= 8;\r\n        this.ip--;\r\n    }\r\n    this.op = op;\r\n};\r\n\r\n/**\r\n * decode huffman code (adaptive)\r\n * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.\r\n * @param {!(Array.<number>|Uint8Array)} dist distination code table.\r\n */\r\nRawInflate.prototype.decodeHuffmanAdaptive = function(litlen, dist) {\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    this.currentLitlenTable = litlen;\r\n\r\n    /** @type {number} output position limit. */\r\n    var olength = output.length;\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /** @type {number} table index. */\r\n    var ti;\r\n    /** @type {number} huffman code distination. */\r\n    var codeDist;\r\n    /** @type {number} huffman code length. */\r\n    var codeLength;\r\n\r\n    while ((code = this.readCodeByTable(litlen)) !== 256) {\r\n        // literal\r\n        if (code < 256) {\r\n            if (op >= olength) {\r\n                output = this.expandBuffer();\r\n                olength = output.length;\r\n            }\r\n            output[op++] = code;\r\n\r\n            continue;\r\n        }\r\n\r\n        // length code\r\n        ti = code - 257;\r\n        codeLength = RawInflate.LengthCodeTable[ti];\r\n        if (RawInflate.LengthExtraTable[ti] > 0) {\r\n            codeLength += this.readBits(RawInflate.LengthExtraTable[ti]);\r\n        }\r\n\r\n        // dist code\r\n        code = this.readCodeByTable(dist);\r\n        codeDist = RawInflate.DistCodeTable[code];\r\n        if (RawInflate.DistExtraTable[code] > 0) {\r\n            codeDist += this.readBits(RawInflate.DistExtraTable[code]);\r\n        }\r\n\r\n        // lz77 decode\r\n        if (op + codeLength > olength) {\r\n            output = this.expandBuffer();\r\n            olength = output.length;\r\n        }\r\n        while (codeLength--) {\r\n            output[op] = output[(op++) - codeDist];\r\n        }\r\n    }\r\n\r\n    while (this.bitsbuflen >= 8) {\r\n        this.bitsbuflen -= 8;\r\n        this.ip--;\r\n    }\r\n    this.op = op;\r\n};\r\n\r\n/**\r\n * expand output buffer.\r\n * @param {Object=} opt_param option parameters.\r\n * @return {!(Array.<number>|Uint8Array)} output buffer.\r\n */\r\nRawInflate.prototype.expandBuffer = function(opt_param) {\r\n    /** @type {!(Array.<number>|Uint8Array)} store buffer. */\r\n    var buffer =\r\n        new (USE_TYPEDARRAY ? Uint8Array : Array)(\r\n            this.op - RawInflate.MaxBackwardLength\r\n        );\r\n    /** @type {number} backward base point */\r\n    var backward = this.op - RawInflate.MaxBackwardLength;\r\n    /** @type {number} copy index. */\r\n    var i;\r\n    /** @type {number} copy limit */\r\n    var il;\r\n\r\n    var output = this.output;\r\n\r\n    // copy to output buffer\r\n    if (USE_TYPEDARRAY) {\r\n        buffer.set(output.subarray(RawInflate.MaxBackwardLength, buffer.length));\r\n    } else {\r\n        for (i = 0, il = buffer.length; i < il; ++i) {\r\n            buffer[i] = output[i + RawInflate.MaxBackwardLength];\r\n        }\r\n    }\r\n\r\n    this.blocks.push(buffer);\r\n    this.totalpos += buffer.length;\r\n\r\n    // copy to backward buffer\r\n    if (USE_TYPEDARRAY) {\r\n        output.set(\r\n            output.subarray(backward, backward + RawInflate.MaxBackwardLength)\r\n        );\r\n    } else {\r\n        for (i = 0; i < RawInflate.MaxBackwardLength; ++i) {\r\n            output[i] = output[backward + i];\r\n        }\r\n    }\r\n\r\n    this.op = RawInflate.MaxBackwardLength;\r\n\r\n    return output;\r\n};\r\n\r\n/**\r\n * expand output buffer. (adaptive)\r\n * @param {Object=} opt_param option parameters.\r\n * @return {!(Array.<number>|Uint8Array)} output buffer pointer.\r\n */\r\nRawInflate.prototype.expandBufferAdaptive = function(opt_param) {\r\n    /** @type {!(Array.<number>|Uint8Array)} store buffer. */\r\n    var buffer;\r\n    /** @type {number} expantion ratio. */\r\n    var ratio = (this.input.length / this.ip + 1) | 0;\r\n    /** @type {number} maximum number of huffman code. */\r\n    var maxHuffCode;\r\n    /** @type {number} new output buffer size. */\r\n    var newSize;\r\n    /** @type {number} max inflate size. */\r\n    var maxInflateSize;\r\n\r\n    var input = this.input;\r\n    var output = this.output;\r\n\r\n    if (opt_param) {\r\n        if (typeof opt_param.fixRatio === 'number') {\r\n            ratio = opt_param.fixRatio;\r\n        }\r\n        if (typeof opt_param.addRatio === 'number') {\r\n            ratio += opt_param.addRatio;\r\n        }\r\n    }\r\n\r\n    // calculate new buffer size\r\n    if (ratio < 2) {\r\n        maxHuffCode =\r\n            (input.length - this.ip) / this.currentLitlenTable[2];\r\n        maxInflateSize = (maxHuffCode / 2 * 258) | 0;\r\n        newSize = maxInflateSize < output.length ?\r\n            output.length + maxInflateSize :\r\n            output.length << 1;\r\n    } else {\r\n        newSize = output.length * ratio;\r\n    }\r\n\r\n    // buffer expantion\r\n    if (USE_TYPEDARRAY) {\r\n        buffer = new Uint8Array(newSize);\r\n        buffer.set(output);\r\n    } else {\r\n        buffer = output;\r\n    }\r\n\r\n    this.output = buffer;\r\n\r\n    return this.output;\r\n};\r\n\r\n/**\r\n * concat output buffer.\r\n * @return {!(Array.<number>|Uint8Array)} output buffer.\r\n */\r\nRawInflate.prototype.concatBuffer = function() {\r\n    /** @type {number} buffer pointer. */\r\n    var pos = 0;\r\n    /** @type {number} buffer pointer. */\r\n    var limit = this.totalpos + (this.op - RawInflate.MaxBackwardLength);\r\n    /** @type {!(Array.<number>|Uint8Array)} output block array. */\r\n    var output = this.output;\r\n    /** @type {!Array} blocks array. */\r\n    var blocks = this.blocks;\r\n    /** @type {!(Array.<number>|Uint8Array)} output block array. */\r\n    var block;\r\n    /** @type {!(Array.<number>|Uint8Array)} output buffer. */\r\n    var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limiter. */\r\n    var il;\r\n    /** @type {number} loop counter. */\r\n    var j;\r\n    /** @type {number} loop limiter. */\r\n    var jl;\r\n\r\n    // single buffer\r\n    if (blocks.length === 0) {\r\n        return USE_TYPEDARRAY ?\r\n            this.output.subarray(RawInflate.MaxBackwardLength, this.op) :\r\n            this.output.slice(RawInflate.MaxBackwardLength, this.op);\r\n    }\r\n\r\n    // copy to buffer\r\n    for (i = 0, il = blocks.length; i < il; ++i) {\r\n        block = blocks[i];\r\n        for (j = 0, jl = block.length; j < jl; ++j) {\r\n            buffer[pos++] = block[j];\r\n        }\r\n    }\r\n\r\n    // current buffer\r\n    for (i = RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {\r\n        buffer[pos++] = output[i];\r\n    }\r\n\r\n    this.blocks = [];\r\n    this.buffer = buffer;\r\n\r\n    return this.buffer;\r\n};\r\n\r\n/**\r\n * concat output buffer. (dynamic)\r\n * @return {!(Array.<number>|Uint8Array)} output buffer.\r\n */\r\nRawInflate.prototype.concatBufferDynamic = function() {\r\n    /** @type {Array.<number>|Uint8Array} output buffer. */\r\n    var buffer;\r\n    var op = this.op;\r\n\r\n    if (USE_TYPEDARRAY) {\r\n        if (this.resize) {\r\n            buffer = new Uint8Array(op);\r\n            buffer.set(this.output.subarray(0, op));\r\n        } else {\r\n            buffer = this.output.subarray(0, op);\r\n        }\r\n    } else {\r\n        if (this.output.length > op) {\r\n            this.output.length = op;\r\n        }\r\n        buffer = this.output;\r\n    }\r\n\r\n    this.buffer = buffer;\r\n\r\n    return this.buffer;\r\n};\r\n\r\nexport default RawInflate;\r\n","const CompressionMethod = {\r\n    DEFLATE: 8,\r\n    RESERVED: 15\r\n};\r\nexport default CompressionMethod;\r\n","import Adler32 from \"./adler32\"\r\nimport RawInflate from \"./rawinflate\"\r\nimport CompressionMethod from \"./zlib\"\r\n\r\nconst Inflate = function(input, opt_params) {\r\n    /** @type {number} */\r\n    var bufferSize;\r\n    /** @type {Inflate.BufferType} */\r\n    var bufferType;\r\n    /** @type {number} */\r\n    var cmf;\r\n    /** @type {number} */\r\n    var flg;\r\n\r\n    /** @type {!(Uint8Array|Array)} */\r\n    this.input = input;\r\n    /** @type {number} */\r\n    this.ip = 0;\r\n    /** @type {RawInflate} */\r\n    this.rawinflate;\r\n    /** @type {(boolean|undefined)} verify flag. */\r\n    this.verify;\r\n\r\n    // option parameters\r\n    if (opt_params || !(opt_params = {})) {\r\n        if (opt_params['index']) {\r\n            this.ip = opt_params['index'];\r\n        }\r\n        if (opt_params['verify']) {\r\n            this.verify = opt_params['verify'];\r\n        }\r\n    }\r\n\r\n    // Compression Method and Flags\r\n    cmf = input[this.ip++];\r\n    flg = input[this.ip++];\r\n\r\n    // compression method\r\n    switch (cmf & 0x0f) {\r\n        case CompressionMethod.DEFLATE:\r\n            this.method = CompressionMethod.DEFLATE;\r\n            break;\r\n        default:\r\n            throw new Error('unsupported compression method');\r\n    }\r\n\r\n    // fcheck\r\n    if (((cmf << 8) + flg) % 31 !== 0) {\r\n        throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\r\n    }\r\n\r\n    // fdict (not supported)\r\n    if (flg & 0x20) {\r\n        throw new Error('fdict flag is not supported');\r\n    }\r\n\r\n    // RawInflate\r\n    this.rawinflate = new RawInflate(input, {\r\n        'index': this.ip,\r\n        'bufferSize': opt_params['bufferSize'],\r\n        'bufferType': opt_params['bufferType'],\r\n        'resize': opt_params['resize']\r\n    });\r\n};\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nInflate.BufferType = RawInflate.BufferType;\r\n\r\n/**\r\n * decompress.\r\n * @return {!(Uint8Array|Array)} inflated buffer.\r\n */\r\nInflate.prototype.decompress = function() {\r\n    /** @type {!(Array|Uint8Array)} input buffer. */\r\n    var input = this.input;\r\n    /** @type {!(Uint8Array|Array)} inflated buffer. */\r\n    var buffer;\r\n    /** @type {number} adler-32 checksum */\r\n    var adler32;\r\n\r\n    buffer = this.rawinflate.decompress();\r\n    this.ip = this.rawinflate.ip;\r\n\r\n    // verify adler-32\r\n    if (this.verify) {\r\n        adler32 = (\r\n            input[this.ip++] << 24 | input[this.ip++] << 16 |\r\n            input[this.ip++] << 8 | input[this.ip++]\r\n        ) >>> 0;\r\n\r\n        if (adler32 !== Adler32(buffer)) {\r\n            throw new Error('invalid adler-32 checksum');\r\n        }\r\n    }\r\n\r\n    return buffer;\r\n};\r\n\r\nexport default Inflate;\r\n","import Inflate from \"./Inflate/inflate\"\r\nconst Zlib = {};\r\nZlib.Inflate = Inflate;\r\nexport default Zlib\r\n"],"names":[],"mappings":"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"}